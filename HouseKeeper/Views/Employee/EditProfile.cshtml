@using HouseKeeper.Models.Views.Employee;
@model EditEmployeeProfileViewModel;
<!DOCTYPE html>
<html lang="en">
<head>

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Website</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <link rel="stylesheet" href="https://unicons.iconscout.com/release/v4.0.0/css/line.css">
    <link rel="stylesheet" href="~/css/Input.css">
    <style>
        /* Styling for the multi-select ComboBox */
        .multiselect {
            width: 200px;
            height: auto;
            overflow-y: auto;
            border: 1px solid #ccc;
            border-radius: 5px;
            padding: 5px;
        }

            .multiselect select {
                width: 100%;
                height: 100%;
                padding: 5px;
                font-size: 16px;
                border: none;
                outline: none;
            }

                .multiselect select option {
                    padding: 5px;
                }

        /* Styling for the selected items */
        .selected-items {
            margin-top: 10px;
            padding: 5px;
            border: 1px solid #ccc;
            border-radius: 5px;
            width: 100%; /* Expand to fill available space */
            display: flex; /* Change to flex container */
            flex-wrap: wrap; /* Wrap items if they overflow */
        }

            .selected-items div {
                margin-right: 5px; /* Add spacing between items */
                padding: 3px 5px;
                background-color: #f0f0f0;
                border-radius: 3px;
            }

        image-preview {
            width: 240px;
            height: 240px;
        }

        input#Employee_Gender {
            margin: 3px;
        }
    </style>
    <script>
        function formatCurrency(input) {
            // Remove non-numeric characters and leading zeros
            let value = input.value.replace(/[^\d]/g, '').replace(/^0+/, '');

            // Check if the input is not empty
            if (value !== '') {
                // Format the number with periods for thousands separator
                value = value.replace(/\B(?=(\d{3})+(?!\d))/g, '.');

                // Update the input value
                input.value = value;
            }
        }
    </script>
    <partial name="HeaderInclude" />
</head>

<body>
    <partial name="BodyInclude" />
    <div class="demo-page">
        <main class="demo-page-content">
            <section>
                <div class="href-target" id="input-types"></div>
                <h1>
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                         stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                         class="feather feather-align-justify">
                        <line x1="21" y1="10" x2="3" y2="10" />
                        <line x1="21" y1="6" x2="3" y2="6" />
                        <line x1="21" y1="14" x2="3" y2="14" />
                        <line x1="21" y1="18" x2="3" y2="18" />
                    </svg>
                    Edit your profile
                </h1>
                <form asp-action="EditProfile" method="post" enctype="multipart/form-data" class="pt-1">
                    <div class="nice-form-group">
                        <label>Avatar</label>
                        <img id="avatarImage" width="225" height="225" src=@Model.Employee.Account.AvatarUrl alt="Avatar" />
                        <input id="avatarImageButton" name="avatarImage" class="form-control" type="file" accept="image/*" />
                    </div>

                    <div class="nice-form-group">
                        <label>First Name</label>
                        <input asp-for="@Model.Employee.FirstName" type="text" placeholder="First Name"
                               pattern="[A-Za-z]+" title="First name contains letters only" maxlength="20"
                            value=@Model.Employee.FirstName required />
                    </div>

                    <div class="nice-form-group">
                        <label>Last Name</label>
                        <input asp-for="@Model.Employee.LastName" type="text" placeholder="Last Name"
                               pattern="[A-Za-z ]+" title="Last name contains letters and spaces only" maxlength="50"
                        value=@Model.Employee.LastName required />
                    </div>

                    <div class="nice-form-group">
                        <label>Birthdate</label>
                        <input asp-for="@Model.Employee.BirthDate" type="date" class="form-control" id="birthdate" placeholder=" " value="@Model.Employee.BirthDate.Value.ToString("yyyy-MM-dd")" required>
                    </div>


                    <div class="nice-form-group gender-group">
                        <label>Gender</label>
                        <div>
                            @Html.RadioButtonFor(model => model.Employee.Gender, "male", true)@Html.Label("Male")
                            @Html.RadioButtonFor(model => model.Employee.Gender, "female", false)@Html.Label("Female")
                        </div>
                    </div>

                    <div class="nice-form-group">
                        <label>Gmail</label>
                        <input asp-for="@Model.Employee.Account.Gmail" type="email" placeholder="Gmail"
                               
                        value=@Model.Employee.Account.Gmail />
                    </div>

                    <div class="nice-form-group">
                        <label>Phone Number</label>
                        <input asp-for="@Model.Employee.Account.PhoneNumber" type="text" placeholder="Phone Number"
                               pattern="[0][35789][0-9]{8}" title="Please use Vietnamese phone number format" minLength="10"
                               maxlength="10"
                        value=@Model.Employee.Account.PhoneNumber required />
                    </div>

                    <div class="nice-form-group">
                        <label>City/Province</label>
                        <select name="CityId" id="citySelect" required>
                            @foreach (var city in Model.Cities)
                            {
                                <option value="@city.CityId">@city.CityName</option>
                            }
                        </select>
                    </div>

                    <div class="nice-form-group">
                        <label>District</label>
                        <input id="districtInput" type="hidden" asp-for="@Model.Employee.District.DistrictId" />
                        <select name="DistrictId" id="districtSelect" required>
                            @foreach (var district in Model.Districts)
                            {
                                <option value="@district.DistrictId" data-cityid="@district.City.CityId">@district.DistrictName</option>
                            }
                        </select>
                    </div>

                    <div class="nice-form-group">
                        <label>Addess</label>
                        <input asp-for="@Model.Employee.Address" type="text" placeholder="Type Address" value=@Model.Employee.Address required />
                    </div>

                    <div class="nice-form-group">
                        <label>Citizen Number</label>
                        <input id="citizenNumberInput" asp-for="@Model.Employee.Identity.CitizenNumber" type="text" placeholder="Citizen Number"
                               pattern="[0][0-9]{11}" title="Please enter the right citizen number format in VietNam" minLength="12" maxlength="12"
                        value=@Model.Employee.Identity.CitizenNumber required />
                    </div>

                    <div class="nice-form-group">
                        <label>Front Identity Image</label>
                        <img id="frontImage" width="70%" height="360" src="@Model.Employee.Identity.FrontImage" alt="Front Id Card" />
                        @if (Model.isIdentityApproved == 0)
                        {
                            <input id="frontImageButton" name="frontImage" class="form-control" type="file" accept="image/*" />
                        }
                    </div>

                    <div class="nice-form-group">
                        <label>Back Identity Image</label>
                        <img id="backImage" width="70%" height="360" src="@Model.Employee.Identity.BackImage" alt="Back Id Card" />
                        @if (Model.isIdentityApproved == 0)
                        {
                            <input id="backImageButton" name="backImage" class="form-control" type="file" accept="image/*" />
                        }

                    </div>

                    <div class="mt-2 button-container">
                        <a href="@Url.Action("Profile", "Employee")" class="btn btn-danger">Cancel</a>
                        <button type="submit" class="btn btn-success">Update</button>
                    </div>

                </form>
            </section>
            <footer>Easy-Fast-Afordable</footer>
        </main>
    </div>
    <script>
        // Get references to both select elements
        var citySelect = document.getElementById('citySelect');
        var districtSelect = document.getElementById('districtSelect');

        // Store all district options in an array
        var districtOptions = Array.from(districtSelect.options);

        // Add event listener to city select element
        citySelect.addEventListener('change', function () {
            var selectedCityId = this.value;

            // Remove all options from district select
            districtSelect.innerHTML = '';

            // Filter and append district options corresponding to the selected city
            districtOptions.forEach(function (option) {
                if (option.getAttribute('data-cityid') === selectedCityId || option.getAttribute('data-cityid') === null) {
                    districtSelect.appendChild(option.cloneNode(true));
                }
            });

            // Trigger change event on district select to update the selected district
            districtSelect.dispatchEvent(new Event('change'));
        });
        // Trigger change event initially to set the initial state
        citySelect.dispatchEvent(new Event('change'));

        // Add event listener to district select element
        districtSelect.addEventListener('change', function () {
            var selectedDistrictId = this.value;

            // Set the hidden input value to the selected district id
            document.getElementById('districtInput').value = selectedDistrictId;
        });
    </script>
    <script>
        // Get references to both select elements
        var frontImage = document.getElementById('frontImage');
        var frontImageButton = document.getElementById('frontImageButton');

        // Add event listener to front image button
        frontImageButton.addEventListener('change', function () {
            var file = this.files[0];
            var reader = new FileReader();

            reader.onload = function (e) {
                frontImage.src = e.target.result;
            };

            reader.readAsDataURL(file);
        });
    </script>
    <script>
        // Get references to both select elements
        var backImage = document.getElementById('backImage');
        var backImageButton = document.getElementById('backImageButton');

        // Add event listener to back image button
        backImageButton.addEventListener('change', function () {
            var file = this.files[0];
            var reader = new FileReader();

            reader.onload = function (e) {
                backImage.src = e.target.result;
            };

            reader.readAsDataURL(file);
        });
    </script>
    <script>
        // Get references to both select elements
        var avatarImage = document.getElementById('avatarImage');
        var avatarImageButton = document.getElementById('avatarImageButton');

        // Add event listener to avatar image button
        avatarImageButton.addEventListener('change', function () {
            var file = this.files[0];
            var reader = new FileReader();

            reader.onload = function (e) {
                avatarImage.src = e.target.result;
            };

            reader.readAsDataURL(file);
        });
    </script>
    <script>
        // set default value for city and district via Model
        $(document).ready(function () {
            var cityId = @Model.Employee.District.City.CityId;
            var districtId = @Model.Employee.District.DistrictId;
            var indentityApproved = (@Model.isIdentityApproved == 1 ? true : false);
            if (indentityApproved) {
                $('#citizenNumberInput').prop('readonly', true);
            }
            $('#citySelect').val(cityId);
            citySelect.dispatchEvent(new Event('change'));

            $('#districtSelect').val(districtId);
            districtSelect.dispatchEvent(new Event('change'));
        });
    </script>
</body>
</html>

